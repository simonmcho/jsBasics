/* 
Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted.
For example, where([1,2,3,4], 1.5) should return 1 because it is greater than 1 (index 0), but less than 2 (index 1).
Likewise, where([20,3,5], 19) should return 2 because once the array has been sorted it will look like [3,5,20] and 19 is less than 20 (index 2) and greater than 5 (index 1).
*/


function where(arr, num) {
  arr.sort(function (a, b) { //The argument for .sort() is the function which sorts in an ascending order
    return a - b;
  });
  
  for (var i in arr) { //iterates over the properties of arr and goes through the if statement
    if (arr[i] >= num) {
      return parseInt(i); //if this case is true, then the var i is returned as an int instead of string
    }
  }
  return arr.length; //because we did not push num into the array, if the num is bigger than any of the
}                    //existing index, then the for loop ends and we can return the length of the array
                     //because it is the same as the what the index position would be if num was in the array
where([2, 20, 10], 19);
